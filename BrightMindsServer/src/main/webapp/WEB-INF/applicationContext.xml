<?xml version="1.0" encoding="UTF-8"?>

<!-- This XML file serves as our ApplicationContext. It is here that we will 
	define our Spring Beans and wire them together. We will also configure any 
	Spring modules we're using here. -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

	<!-- This tag tells the framework that we want to use an annotation-driven 
		approach to declaring our components. -->
	<context:annotation-config></context:annotation-config>
	

	<!-- This enables the use of the AspectJ style of Spring AOP. AspectJ, as 
		a style of AOP, allows us to modularize our cross-cutting concerns, which 
		are concerns that cut across several layers of an application. -->
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>

	<!-- In order to configure our Spring ORM integration and allow the framework 
		to manage our Hibernate transactions, we must include three new beans in 
		our IOC container: *dataSource *sessionFactory *transactionManager -->

	<context:property-placeholder
		location="classpath:application.properties" />

	<bean name="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName"
			value="org.postgresql.Driver"></property>
		<property name="url" value="${url}"></property>
		<property name="username" value="${username1}"></property>
		<property name="password" value="${password}"></property>
	</bean>

	<bean name="sessionFactory"
		class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQLDialect</prop>
				<prop key="hibernate.show_sql">false</prop>
				<prop key="hibernate.hbm2ddl.auto">validate</prop>
			</props>
		</property>
		<property name="annotatedClasses">
			<list>
				<value>com.brightminds.model.Type</value>
				<value>com.brightminds.model.User</value>
				<value>com.brightminds.model.Admin</value>
				<value>com.brightminds.model.Instructor</value>
				<value>com.brightminds.model.Student</value>
				<value>com.brightminds.model.Payment</value>
				<value>com.brightminds.model.Course</value>
				<value>com.brightminds.model.Unit</value>
				<value>com.brightminds.model.Lesson</value>
				<value>com.brightminds.model.Test</value>
			</list>
		</property>
	</bean>

	<!-- Transaction Manager This makes all sessions Spring-managed transactions. -->
	<bean name="transactionManager"
		class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>

	<!-- Tell the framework which packages to scan for those annotations. -->
	<context:component-scan
		base-package="com.brightminds.aspect;com.brightminds.util;com.brightminds.repository;com.brightminds.service;com.brightminds.controller"></context:component-scan>


</beans>
